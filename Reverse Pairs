Given an integer array nums, return the number of reverse pairs in the array.
A reverse pair is a pair (i, j) where:
0 <= i < j < nums.length and nums[i] > 2 * nums[j].

Input: nums = [1,3,2,3,1]
Output: 2
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1

Question explanation: we have to count the reverse pairs, by following these two above conditions.


approach 1 : brute force T.C = O(n^2) S.C=O(1)

class Solution {
public:
    int reversePairs(vector<int>& nums) {
        int count=0;
        for(int i=0;i<nums.size()-1;i++){
            for(int j=i+1;j<nums.size();j++){
                if(nums[i]>2*nums[j])
                count++;
            }
        }
        return count;
    }
};



approach 2 : optimal solution by using merge sort . T.=O(2n log n) S.C=O(n)

class Solution {
public:
    void merge(vector<int>&nums, int low, int high, int mid) {
        int i = mid, j = mid+1;
        while(i >= 0 and j <= high) {
            if(nums[i] > nums[j]) swap(nums[i--], nums[j++]);
            else break;
        }

        sort(nums.begin()+low, nums.begin()+mid+1);
        sort(nums.begin()+mid+1, nums.begin()+high+1);
    }

    int countPairs(vector<int> &nums, int low, int high, int mid) {
        int cnt = 0;
        int right = mid+1;
        
        for(int i = low; i <= mid; ++i) {
            while(right <= high and nums[i] > (long long)2*nums[right]) ++right;
            cnt += (right-mid-1);
        }
        return cnt;
    }
    
    int mergeSort(vector<int> &nums, int low, int high) {
        int cnt = 0;
        if(low >= high) return cnt;

        int mid = low + (high-low)/2;

        cnt += mergeSort(nums, low, mid);
        cnt += mergeSort(nums, mid+1, high);
        cnt += countPairs(nums, low, high, mid);
        merge(nums, low, high, mid);
        return cnt;
    }

    int reversePairs(vector<int>& nums) {
        int n=nums.size();
        return mergeSort(nums,0,n-1);
    }
};
