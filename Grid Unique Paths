There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]).
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.
Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

Input: m = 3, n = 7
Output: 28

basically isme hume no. of unique ways return krna hai jisse hum starting se ending tak pahuch ske. 
iske liye hum only 2 directions mein travel kr skte hai , 1)down 2)right.


1st approach : brute force using recursion T.C = exponential mein 

int uniquePaths(int m, int n) {
int i,j;
if(i==(n-1) && j==(m-1)) return 1;
if(i>=n || j>=m) return 0;
else return uniquePaths(i+1,j) + uniquePaths(i,j+1);




2nd approach : using dp T.C= O(n*m) 

int uniquePaths(int m, int n) {
int i,j;
vector<vector<int>> dp;
if(i==(n-1) && j==(m-1)) return 1;
if(i>=n || j>=m) return 0;
if(dp[i][j]!=-1) return dp[i][j];
else return dp[i][j] =uniquePaths(i+1,j) + uniquePaths(i,j+1);




3rd approach : by making permutations and combinations T.C=O(n-1) or O(m-1)

int uniquePaths(int m, int n) {
        int N=m+n-2;
        int r=n-1;
        double res=1;
        for(int i=1;i<=r;i++){
            res=res*(N-r+i)/i;
        }
        return (int)res;
}




