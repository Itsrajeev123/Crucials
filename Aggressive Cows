You are given an array consisting of n integers which denote the position of a stall. You are also given an integer k which denotes the number of aggressive cows.
You are given the task of assigning stalls to k cows such that the minimum distance between any two of them is the maximum possible.
The first line of input contains two space-separated integers n and k.
The second line contains n space-separated integers denoting the position of the stalls.

Input: n=5  k=3
stalls = [1 2 4 8 9]
Output: 3



OPTIMIZED CODE -> by using binary search

class Solution {
public:
    bool PossibleToReplace(vector<int> &stalls,int dist,int cows){
        int countCow=1,lastCow=stalls[0];
        for(int i=1;i<stalls.size();i++){
            if(stalls[i]-lastCow>=dist){
                countCow++;
                lastCow=stalls[i];
            }
            if(countCow==cows)
                return true;
        }
        return false;
    }

    int solve(int n, int k, vector<int> &stalls) {
        sort(stalls.begin(),stalls.end());
        int low=1,high=stalls[n-1]-stalls[0];
        while(low<=high){
            int mid=(low+high)/2;
            if(PossibleToReplace(stalls,mid,k)==true){
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }
        return high;
    }
};
