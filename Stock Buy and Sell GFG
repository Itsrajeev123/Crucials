Company Tags
Paytm,Flipkar,tAccolite,Amazon,Microsoft,D-E-Shaw,MakeMyTrip,Ola Cabs,Oracle,Walmart,Goldman Sachs,DirectiIntuit,Google,Quikr,Salesforce,PubmaticSapient,Swiggy,Media.net

The cost of stock on each day is given in an array A[] of size N. Find all the segments of days on which you buy and sell the stock such that the sum of difference between sell and buy prices is maximized. Each segment consists of indexes of two elements, first is index of day on which you buy stock and second is index of day on which you sell stock.
Note: Since there can be multiple solutions, the driver code will print 1 if your answer is correct, otherwise, it will return 0. In case there's no profit the driver code will print the string "No Profit" for a correct solution.

Example:
Input: N = 7
A[] = {100,180,260,310,40,535,695}
Output: 1
Explanation: One possible solution is (0 3) (4 6). We can buy stock on day 0, and sell it on 3rd day, which will  give us maximum profit. Now, we buy  stock on day 4 and sell it on day 6.

approach-isme basically adjacent elements check krne hai and less than n-1 tak hi travserse kr skte hai, so iske liye 0 se lekar < n-1 tak loop chala denge and then check krenge ki next index ki value 
current vale se jyada hai to sell kr denge . basically isme hume 2d vector return karana hai jisme wo 2 index ki value store hogi, pehle buy and then sell ka jisse pata chal sake ki konse din buy kiya and konse din sell to gain max profit. {buy,sell}

first code -> less optimal 

class Solution{
public:
    vector<vector<int> > stockBuySell(vector<int> A, int n){
        vector<vector<int>> ans;
        int buy=0,sell=0;
        for(int i=0;i<n-1;i++) {
            if(A[i+1]>A[i]){
                sell++;
            }
            else{
                if(sell>buy){
                    vector<int>list;
                    list.push_back(buy);
                    list.push_back(sell);
                    ans.push_back(list);
                }
                buy=i+1;
                sell=i+1;
            }
        }    

        // yaha pe last ke 2 elements k liye conditions likhi hui hai bcoz hum <n-1 tak hi travserse kr skte thhey loop mein 
        if(sell>buy){
            vector<int>list;
            list.push_back(buy);
            list.push_back(sell);
            ans.push_back(list);
        }
        return ans;
    }
};

code 2->more optimal

class Solution{
public:
    //Function to find the days of buying and selling stock for max profit.
    vector<vector<int> > stockBuySell(vector<int> A, int n){
        vector<vector<int>> ans;
        for(int i=1;i<n;i++) {
            if(A[i]>A[i-1]){
                ans.push_back({i-1,i});  basically yaha direct use kiya gya hai jo i-1 hai wo buy ke liye and i sell ke liye use hua hai 
            }
        }
        return ans;
    }
};
