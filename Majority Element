Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

Input: nums = [3,2,3]
Output: 3



class Solution { 
public:
    int majorityElement(vector<int>& nums) {
        // brute force -> O(n^2)
        // for(int i=0;i<nums.size();i++){
        //     int cnt=0;
        //     for(int j=0;j<nums.size();j++){
        //         if(nums[j]==nums[i])
        //         cnt++;
        //     }
        //     if(cnt>nums.size()/2)
        //     return nums[i];
        // }
        // return 0;

        
        // better:  hash map ->O(n log n)+O(n)
        // map<int,int> mp;
        // for(int i=0;i<nums.size();i++){
        //     mp[nums[i]]++;
        // }
        // for(auto i:mp){
        //     if(i.second>nums.size()/2)
        //     return i.first;
        // }
        // return 0;


       optimal approach mein moore algorithm ka use hai .

    }

};
